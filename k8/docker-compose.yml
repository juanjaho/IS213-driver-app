version: "3.8"

volumes:
  pgdata:
  kongadata:
  rabbitmq_data:

networks:
  kong-net:
    driver: bridge

services:

  # For Message Queue Kafka
  zookeeper:
    image: 'bitnami/zookeeper:latest'
    restart: always
    networks:
      - kong-net
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: 'bitnami/kafka:latest'
    restart: always
    networks:
      - kong-net
    ports:
      - '9093:9093'
      - '9092:9092'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://kafka:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
  # End of Message Queue Kafka

  ####################################
  # RabbitMQ: The messaging broker   
  ####################################
  rabbitmq:
    image: rabbitmq:3-management
    hostname: esd-rabbit
    restart: always
    networks:
      - kong-net
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  login:
    build:
      context: ./login
      dockerfile: Dockerfile
    image: jsebastian2020/login:1.0.0
    restart: always
    networks:
      - kong-net
    ports:
      - "5001:5001"

  driver:
    build:
      context: ./driver
      dockerfile: Dockerfile
    image: jsebastian2020/driver:1.0.0
    restart: always
    networks:
      - kong-net
    ports:
      - "5002:5002"

  parcel:
    build:
      context: ./parcel
      dockerfile: Dockerfile
    image: jsebastian2020/parcel:1.0.0
    restart: always
    networks:
      - kong-net
    ports:
      - "5003:5003"

  customer:
    build:
      context: ./customer
      dockerfile: Dockerfile
    image: jsebastian2020/customer:1.0.0
    restart: always
    networks:
      - kong-net
    ports:
      - "5004:5004"

  sms:
    build:
      context: ./sms-node
      dockerfile: Dockerfile
    image: jsebastian2020/sms:1.0.0
    restart: always
    networks:
      - kong-net
    depends_on:
      - kafka
      - zookeeper

  email:
    build:
      context: ./email
      dockerfile: Dockerfile
    image: jsebastian2020/email:1.0.0
    restart: always
    networks:
      - kong-net
    depends_on:
      - rabbitmq
      - updateParcelStatus
 

  load-dashboard:
    build:
      context: ./load_dashboard
      dockerfile: Dockerfile
    image: jsebastian2020/load_dashboard:1.0.0
    restart: always
    networks:
      - kong-net
    environment:
      loginURL: 'http://login:5001/authenticate'
      driverURL: 'http://driver:5002/driver'
      parcelURL: 'http://parcel:5003/parcel'
    ports:
      - "5000:5000"
    depends_on:
      - login
      - driver
      - parcel

  get-delivery-addresses:
    build:
      context: ./get_delivery_addresses
      dockerfile: Dockerfile
    image: jsebastian2020/get_delivery_addresses:1.0.0
    restart: always
    networks:
      - kong-net
    environment:
      customerURL: 'http://customer:5004/customer'
    ports:
      - "5010:5010"
    depends_on:
      - customer

  update-parcel-status:
    build:
      context: ./update_parcel_status
      dockerfile: Dockerfile
    image: jsebastian2020/update_parcel_status:1.0.0
    restart: always
    networks:
      - kong-net
    environment:
      customerURL: 'http://customer:5004/customer'
      parcelURL: 'http://parcel:5003/parcel'
      rabbit_host: rabbitmq
      rabbit_port: 5672
      PYTHONUNBUFFERED: 1
    ports:
      - "5020:5020"
    depends_on:
      - parcel
      - customer
      - sms
      - kafka
      - rabbitmq

  #######################################
  # Postgres: The database used by Kong
  #######################################
  kong-database:
    image: postgres:9.6
    restart: always
    networks:
      - kong-net
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "kong" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data

  #######################################
  # Kong database migration
  #######################################
  kong-migration:
    image: kong:2.0.4
    command: "kong migrations bootstrap"
    restart: on-failure
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
    depends_on:
      - kong-database

  #######################################
  # Kong: The API Gateway
  #######################################
  kong:
    image: kong:2.0.4
    restart: always
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    depends_on:
      - kong-migration
    ports:
      - "8000:8000"
      - "8001:8001"

  #######################################
  # Konga: Kong GUI
  #######################################
  konga:
    image: pantsel/konga
    restart: always
    networks:
      - kong-net
    environment:
      DB_ADAPTER: postgres
      DB_HOST: kong-database
      DB_USER: kong
      DB_PASSWORD: password
      DB_DATABASE: konga_db
    depends_on:
      - kong
    ports:
      - "1337:1337"
    volumes:
      - kongadata:/app/kongadata
